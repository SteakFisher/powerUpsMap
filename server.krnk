# Server Script runs only on Hosted server & not in test mode
# KrunkScript Copyright (C) Yendis Entertainment Pty Ltd
# 
# Add custom actions here

# Runs when the game starts
public action start() {

}

# Runs every game tick
public action update(num delta) {

}

# Player spawns in
public action onPlayerSpawn(str id) {
	obj player = GAME.PLAYERS.findByID(id);
	
	player = GAME.PLAYERS.findByID(id);
	player.sprintState = false;
	player.sprintStateOld = false;

	player.stamina = {
		max: 10000,
		
	    count : 10000,
	    check : true,
		increaseValue : 500,
	    old : 10000,
	};

	player.sprint = {
	    boost : 0.0002,
		key : 20,
	    staminaLoss: -1,
	};

	player.timers = {
		staminaIncreaseTimer : 0,
		jumpCoolDown : 0
	};

	player.timersMax = {
		staminaIncreaseTimer : 1000,
		jumpCoolDown : 5000
	};

	player.walk = {
		staminaLoss: -0.005
	};

	player.jump = {
		yVel: 0.003,
		staminaLoss: -2500,
		
		count: 0
	};
}

# Player died
public action onPlayerDeath(str id, str killerID) {

}

# Player got damaged
public action onPlayerDamage(str id, str doerID, num amount) {

}

# Player update
public action onPlayerUpdate(str id, num delta, obj inputs) {
	obj player = GAME.PLAYERS.findByID(id);
	GAME.log(player.stamina.count);
	if(!!player.sprintState){
		num zComp = (num) player.sprint.boost * delta * (Math.cos((num)player.rotation.x));
    	num xComp = (num) player.sprint.boost * delta * (Math.sin((num)player.rotation.x));
    	(num) player.velocity.x -= xComp;
    	(num) player.velocity.z -= zComp;

		(num) player.stamina.count -= 1 * delta;
	}

	if((bool) player.sprintState != (bool) player.sprintStateOld){
		GAME.NETWORK.send('ps', {d: player.sprintState});
		player.sprintStateOld = player.sprintState;
	}

	if((num) player.stamina.count > (num) player.stamina.max){
		player.stamina.count = player.stamina.max;
	}

	if((num) player.stamina.count <= 0){
		player.stamina.count = 0;
		player.stamina.check = false;
	}

	if((num) player.stamina.count < (num) player.stamina.max){
		if((num) player.stamina.old == (num) player.stamina.count){
			(num) player.timers.staminaIncreaseTimer += delta;
		}
		
		else if((num) player.stamina.old > (num) player.stamina.count){
			player.timers.staminaIncreaseTimer = 0;
		}
		
		if((num) player.timers.staminaIncreaseTimer >= (num) player.timersMax.staminaIncreaseTimer){
			(num) player.stamina.count += (num) player.stamina.increaseValue;
			player.timers.staminaIncreaseTimer = 0;
		}
		
		player.stamina.old = player.stamina.count;
	}	
	
	if(!!inputs.movDir){
		if((num) player.stamina.count != 0){
			(num) player.stamina.count += (num) player.walk.staminaLoss * delta;
		}
		else if((num) player.stamina.count == 0){
			player.velocity.x = 0;
			player.velocity.z = 0;
			player.timers.staminaIncreaseTimer = 0;
		}
	}

	if(!player.jumpCooldownBool){
		if((num)player.stamina.count > (-1 * (num)player.jump.staminaLoss)){
			if((num)player.jump.count > 0){
        		if(!!player.onGround){
        	    	player.jump.count = 0;
        		}
    		}
    	
    		if((num) player.jump.count == 1){
        		if(!inputs.jump){
        	    	player.jump.count = 2;
        		}
    		}
	
    		if(!!inputs.jump){
        		if((num)player.jump.count == 0){
        	    	player.jump.count = 1;
        		}
        		else if((num)player.jump.count == 2){
					(num) player.velocity.y += (delta * (num)player.jump.yVel);
        	    	player.jump.count = 3;
					(num) player.stamina.count += (num)player.jump.staminaLoss;
					player.jumpCooldownBool = true;
        		}
    		}
		}
	}

	if(!!player.jumpCooldownBool){
		(num) player.timers.jumpCoolDown += delta;
		if((num) player.timers.jumpCoolDown > (num) player.timersMax.jumpCoolDown){
			player.jumpCooldownBool = false;
			(num) player.timers.jumpCoolDown = 0;
		}
	}
}

# Called from Custom Trigger Action
public action onCustomTrigger(str playerID, str customParam, num value) {

}

# Server receives network message
public action onNetworkMessage(str id, obj data, str playerID) {
	obj player = GAME.PLAYERS.findByID(playerID);
	if(id == 'ps'){
		player.sprintState = data.d;
	}
}

# Server receives chat message
public action onChatMessage(str msg, str playerID) {

}

# When a player leaves the server
public action onPlayerLeave(str playerID) {

}

# Runs when the round ends
public action onGameEnd() {

}

# When a player finished a video
public action onAdFinished(str playerID, bool success) {

}

# Runs when the server closes
public action onServerClosed() {

}
