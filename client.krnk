# Client Script runs only on the client
# KrunkScript Copyright (C) Yendis Entertainment Pty Ltd
bool first = true;
# Add custom actions here

obj staminaBar = {
    backgroundBar : {
        css: 'width:550px;height:75px;position:absolute;' +
			 'top:3%;right:2%;' +
			 'background-color:#555555;cursor:pointer;border-radius:90px;' +
			 'border:solid 2px #555555;display:block;overflow-y: hidden;' +
             'color:white; font-size: 20px; font-weight: bold;',
    },
	staminaBar1 : {
		css: 'width:528px;height:55px;position:absolute;' +
			 'background-color:#3F37C9;cursor:pointer;border-radius:90px;top:8px;left:9px;' +
			 'border:solid 2px #3F37C9;display:block;overflow-y: hidden;' +
             'color:white; font-size: 20px; font-weight: bold;text-align: center;',
	}
};

action renderStaminabar(){
	GAME.UI.addDIV('backgroundBar', true, staminaBar.backgroundBar.css);
    GAME.UI.addDIV('staminaBar', true, staminaBar.staminaBar1.css, 'backgroundBar');
	GAME.UI.addDIV('staminaBarText', true, 'position:fixed;line-height:50px;', 'staminaBar');
	GAME.UI.updateDIVText('staminaBarText', 'STAMINA');
	GAME.UI.updateDIV('staminaBarText', 'font-size', '30px');
	GAME.UI.updateDIV('staminaBarText', 'color', 'white');
	GAME.UI.updateDIV('staminaBarText', 'text-indent', '200px');
}


# Runs when the game starts
public action start() {
	obj player = GAME.PLAYERS.getSelf();
	player.hasJump = false;
	player.hasSprint = false;
}

# Runs every game tick
public action update(num delta) {

}

# Add rendering logic in here
public action render(num delta) {
	obj player = GAME.PLAYERS.getSelf();
	if((num) player.stamina.count != (num) player.stamina.old){
		num ratio = ((num) player.stamina.count / (num) player.stamina.max);
		str newWidth = toStr (UTILS.math.floor(528 * ratio)) + 'px';
		GAME.UI.updateDIV('staminaBar', 'width', newWidth);
		
		player.stamina.old = player.stamina.count;
	}
}

# Player spawns in
public action onPlayerSpawn(str id) {
	obj player = GAME.PLAYERS.getSelf();
	player.sprintState = false;
	player.sprintStateOld = false;
	player.jumpCooldownBool = false;
	
	renderStaminabar();

	if(!!first){
		first = false;
		player.hasJump = true;
		player.hasSprint = true;
	}

	player.stamina = {
		max: 10000,
		
	    count : 10000,
	    check : true,
		increaseValue : 500,
	    old : 10000,
	    stagnant : false
	};

	player.sprint = {
	    boost : 0.0002,
		key : 20,
	    staminaLoss: -1
	};

	player.timers = {
		staminaIncreaseTimer : 0,
		jumpCoolDown : 0
	};

	player.timersMax = {
		staminaIncreaseTimer : 1000,
		jumpCoolDown : 5000
	};

	player.walk = {
		staminaLoss: -0.005
	};

	player.jump = {
		yVel: 0.003,
		staminaLoss: -2500,
		
		count: 0
	};

	player.coin = 0;

	player.registerSyncValues("sprintState");
	player.registerSyncValues("stamina.count");
	player.registerSyncValues("jumpCooldownBool");
}

# Player died
public action onPlayerDeath(str id, str killerID) {

}

# Player update
public action onPlayerUpdate(str id, num delta, obj inputs) {
	obj player = GAME.PLAYERS.getSelf();
	if(!!player.hasSprint){
		if(!!player.sprintState){
			num zComp = (num) player.sprint.boost * delta * (Math.cos((num)player.rotation.x));
    		num xComp = (num) player.sprint.boost * delta * (Math.sin((num)player.rotation.x));
    		(num) player.velocity.x -= xComp;
    		(num) player.velocity.z -= zComp;
	
			(num) player.stamina.count -= 1 * delta;
		}
	
		if((bool) player.sprintState != (bool) player.sprintStateOld){
			GAME.NETWORK.send('ps', {d: player.sprintState});
			player.sprintStateOld = player.sprintState;
		}
	}
	

	if((num) player.stamina.count > (num) player.stamina.max){
		player.stamina.count = player.stamina.max;
	}

	if((num) player.stamina.count <= 0){
		player.stamina.count = 0;
		player.stamina.check = false;
	}

	if((num) player.stamina.count < (num) player.stamina.max){
		if((num) player.stamina.old == (num) player.stamina.count){
			(num) player.timers.staminaIncreaseTimer += delta;
		}
		
		else if((num) player.stamina.old > (num) player.stamina.count){
			player.timers.staminaIncreaseTimer = 0;
		}
		
		if((num) player.timers.staminaIncreaseTimer >= (num) player.timersMax.staminaIncreaseTimer){
			(num) player.stamina.count += (num) player.stamina.increaseValue;
			player.timers.staminaIncreaseTimer = 0;
		}
	}

	if(!!inputs.movDir){
		if((num) player.stamina.count != 0){
			(num) player.stamina.count += (num) player.walk.staminaLoss * delta;
			player.timers.staminaIncreaseTimer = 0;
		}
		else if((num) player.stamina.count == 0){
			player.velocity.x = 0;
			player.velocity.z = 0;
			player.timers.staminaIncreaseTimer = 0;
		}
	}
	if(!!player.hasJump){
			if(!player.jumpCooldownBool){
			if((num)player.stamina.count > (-1 * (num)player.jump.staminaLoss)){
				if((num)player.jump.count > 0){
    	    		if(!!player.onGround){
    	    	    	player.jump.count = 0;
    	    		}
    			}
    		
    			if((num) player.jump.count == 1){
    	    		if(!inputs.jump){
    	    	    	player.jump.count = 2;
    	    		}
    			}
		
    			if(!!inputs.jump){
    	    		if((num)player.jump.count == 0){
    	    	    	player.jump.count = 1;
    	    		}
    	    		else if((num)player.jump.count == 2){
						(num) player.velocity.y += (delta * (num)player.jump.yVel);
    	    	    	player.jump.count = 3;
						(num) player.stamina.count += (num)player.jump.staminaLoss;
						player.jumpCooldownBool = true;
    	    		}
    			}
			}
		}
	
		if(!!player.jumpCooldownBool){
			(num) player.timers.jumpCoolDown += delta;
			if((num) player.timers.jumpCoolDown > (num) player.timersMax.jumpCoolDown){
				player.jumpCooldownBool = false;
				(num) player.timers.jumpCoolDown = 0;
			}
		}
	}
}

# User pressed a key
public action onKeyPress(str key, num code) {
	obj player = GAME.PLAYERS.getSelf();
	if(code == 20){
		if((num) player.stamina.count > 0){
			player.sprintState = true;
		}
		else{
			player.sprintState = false;
		}
	}
}

# User released a key
public action onKeyUp(str key, num code) {
	obj player = GAME.PLAYERS.getSelf();
	if(code == 20){
		player.sprintState = false;
	}
}

# User held a key
public action onKeyHeld(str key, num code) {
	
}

# User pressed a button on a controller
public action onControllerPress(str key, num code) {

}

# User released a button on a controller
public action onControllerUp(str key, num code) {

}

# User held a button on a controller
public action onControllerHeld(str key, num code) {

}

# User clicked on screen
public action onMouseClick(num button, num x, num y) {

}

# User released clicked on screen
public action onMouseUp(num button, num x, num y) {

}

# User scrolled on screen
public action onMouseScroll(num dir) {

}

# User clicked a DIV (ID)
public action onDIVClicked(str id) {

}

# Client receives network message
public action onNetworkMessage(str id, obj data) {
	obj player = GAME.PLAYERS.getSelf();
	if(id=='cc'){
		player.coins = data.c;
	}
}
