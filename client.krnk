# Client Script runs only on the client
# KrunkScript Copyright (C) Yendis Entertainment Pty Ltd
# 
# Add custom actions here

obj stamina = {
    count : 5000,
    check : true,
    increaseTimer : 1000,
    old : 10000,
    stagnantTimer : 0,
    stagnant : false
};

obj sprint = {
    boost : 0.0002,
    staminaLoss: -5,
    state : false
};

obj player = {};

bool action checkStamina(){
	stamina.check = true;
	if((num) stamina.count<=0){
		stamina.count=0;
		stamina.check = false;
	}
	return (bool) stamina.check;
}

action editStamina(num editNum){
	(num) stamina.count+= editNum;
	checkStamina();
}

bool action staminaStagnant(num delta){
	if((num) stamina.count < 10000){
		if((num) stamina.old == (num) stamina.count){
			(num) stamina.stagnantTimer += delta;
		}
		else if((num) stamina.old > (num) stamina.count){
			stamina.stagnantTimer = 0;
			stamina.stagnant = false;
		}
		if((num) stamina.stagnantTimer >= 1000){
		    stamina.stagnant = true;
		}
	}
	stamina.old = (num) stamina.count;
	return (bool) stamina.stagnant;
}

action increaseStamina(num delta){
	(num) stamina.increaseTimer-=delta;
	if((num) stamina.increaseTimer<=0){
        GAME.log("reached");
		stamina.increaseTimer=1000;
		if((num) stamina.count<10000){
			editStamina(500);
			if((num) stamina.count>10000){
				stamina.count=10000;
			}
		}
	}
}

action sprintPlayer(num delta){
    num zComp = (num) sprint.boost * delta * (Math.cos((num)player.rotation.x));
    num xComp = (num) sprint.boost * delta * (Math.sin((num)player.rotation.x));
    (num) player.velocity.x -= xComp;
    (num) player.velocity.z -= zComp;

    editStamina((num) sprint.staminaLoss * delta);
}

action sprintActive(num code){
    if(code == 20){
        if((num)stamina.count > ((num) sprint.staminaLoss -1)){
            sprint.state = true;
        }
    }
}

action sprintDeactive(num code){
    if(code == 20){
        sprint.state = false;
    }
}

action checkSprint(num delta){
    if(!!sprint.state){
        sprintPlayer(delta);
    }
}

# Runs when the game starts
public action start() {
    
}

# Runs every game tick
public action update(num delta) {
    checkStamina();
}

# Add rendering logic in here
public action render(num delta) {
	
}

# Player spawns in
public action onPlayerSpawn(str id) {
    player = GAME.PLAYERS.getSelf();
}

# Player died
public action onPlayerDeath(str id, str killerID) {

}

# Player update
public action onPlayerUpdate(str id, num delta, obj inputs) {
	if(!!staminaStagnant(delta)){
		increaseStamina(delta);
	}
    checkSprint(delta);
}

# User pressed a key
public action onKeyPress(str key, num code) {
    sprintActive(code);
}

# User released a key
public action onKeyUp(str key, num code) {
    sprintDeactive(code);
}

# User held a key
public action onKeyHeld(str key, num code) {
    
}

# User clicked on screen
public action onMouseClick(num button, num x, num y) {

}

# User released clicked on screen
public action onMouseUp(num button, num x, num y) {

}

# User scrolled on screen
public action onMouseScroll(num dir) {

}

# User clicked a DIV (ID)
public action onDIVClicked(str id) {

}

# Client receives network message
public action onNetworkMessage(str id, obj data) {

}
