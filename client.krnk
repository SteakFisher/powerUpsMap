# Client Script runs only on the client
# KrunkScript Copyright (C) Yendis Entertainment Pty Ltd
# 
# Add custom actions here
#a
obj stamina = {
	max: 10000,
	increaseTimerMax : 1000,
	stagnantTimerMax : 1000,
	
    stagnantTimer : 0,
    count : 10000,
    check : true,
    increaseTimer : 1000,
	increaseValue : 500,
    old : 10000,
    stagnant : false
};

obj staminaBar = {
    backgroundBar : {
        css: 'width:550px;height:75px;position:absolute;' +
			 'top:3%;right:2%;' +
			 'background-color:#555555;cursor:pointer;border-radius:90px;' +
			 'border:solid 2px #555555;display:block;' +
             'color:white; font-size: 20px; font-weight: bold;',
    },
	staminaBar1 : {
		css: 'width:528px;height:55px;position:absolute;' +
			 'background-color:#3F37C9;cursor:pointer;border-radius:90px;top:8px;left:9px;' +
			 'border:solid 2px #3F37C9;display:block;' +
             'color:white; font-size: 20px; font-weight: bold;text-align: center;',
	}
};

obj sprint = {
    boost : 0.0002,
	key : 20,
    staminaLoss: -1,
	
    state : false
};

obj jump = {
	yVel: 0.003,
	cooldownTimerMax : 5000,
	staminaLoss: -2500,
	
	cooldownTimer: 0,
	cooldownBool: false,
	count: 0
};

obj player = {};

bool action checkStamina(){
	stamina.check = true;
	if((num) stamina.count<=0){
		stamina.count=0;
		stamina.check = false;
		sprint.state = false;
	}
	return (bool) stamina.check;
}

action editStamina(num editNum){
	(num) stamina.count+= editNum;
	checkStamina();
}

bool action staminaStagnant(num delta){
	if((num) stamina.count < (num) stamina.max){
		if((num) stamina.old == (num) stamina.count){
			(num) stamina.stagnantTimer += delta;
		}
		else if((num) stamina.old > (num) stamina.count){
			stamina.stagnantTimer = 0;
			stamina.stagnant = false;
		}
		if((num) stamina.stagnantTimer >= (num) stamina.stagnantTimerMax){
		    stamina.stagnant = true;
		}
	}
	stamina.old = (num) stamina.count;
	return (bool) stamina.stagnant;
}

action increaseStamina(num delta){
	(num) stamina.increaseTimer-=delta;
	if((num) stamina.increaseTimer<=0){
		stamina.increaseTimer=stamina.increaseTimerMax;
		if((num) stamina.count<(num) stamina.max){
			editStamina((num)stamina.increaseValue);
			if((num) stamina.count>(num) stamina.max){
				stamina.count=(num) stamina.max;
			}
		}
	}
}

action sprintPlayer(num delta){
    num zComp = (num) sprint.boost * delta * (Math.cos((num)player.rotation.x));
    num xComp = (num) sprint.boost * delta * (Math.sin((num)player.rotation.x));
    (num) player.velocity.x -= xComp;
    (num) player.velocity.z -= zComp;

    editStamina((num) sprint.staminaLoss * delta);
}

action sprintActive(num code){
    if(code == (num) sprint.key){
        if((num)stamina.count > ((num) sprint.staminaLoss*-1)){
            sprint.state = true;
        }
	else{
	    sprint.state=false;
	}
  }
}

action sprintDeactive(num code){
    if(code == (num) sprint.key){
        sprint.state = false;
    }
}

action checkSprint(num delta){
    if(!!sprint.state){
        sprintPlayer(delta);
    }
}

action checkDoubleJump(num delta){
	if(!!jump.cooldownBool){
		(num) jump.cooldownTimer += delta;
		if((num)jump.cooldownTimer >= (num) jump.cooldownTimerMax){
			jump.cooldownBool = false;
		}
	}
}

action doubleJump(obj inputs, num delta){
	if(!jump.cooldownBool){
		if((num)stamina.count > (num)jump.staminaLoss){
			if((num)jump.count > 0){
        		if(!!player.onGround){
        	    	jump.count = 0;
        		}
    		}
    	
    		if((num) jump.count == 1){
        		if(!inputs.jump){
        	    	jump.count = 2;
        		}
    		}
	
    		if(!!inputs.jump){
        		if((num)jump.count == 0){
        	    	jump.count = 1;
        		}
        		else if((num)jump.count == 2){
					(num) player.velocity.y += (delta * (num)jump.yVel);
        	    	jump.count = 3;
					editStamina((num) jump.staminaLoss);
					jump.cooldownBool = true;
        		}
    		}
		}
	}
}

action renderStaminaBar(){
    GAME.UI.addDIV('backgroundBar', true, staminaBar.backgroundBar.css);
    GAME.UI.addDIV('staminaBar', true, staminaBar.staminaBar1.css, 'backgroundBar');
	GAME.UI.addDIV('staminaBarText', true, 'position:fixed;line-height:50px;', 'staminaBar');
	GAME.UI.updateDIVText('staminaBarText', 'STAMINA');
	GAME.UI.updateDIV('staminaBarText', 'font-size', '30px');
	GAME.UI.updateDIV('staminaBarText', 'color', 'white');
	GAME.UI.updateDIV('staminaBarText', 'text-indent', '200px');
}

action updateStaminaBar(){
	num ratio = ((num) stamina.count / (num) stamina.max);
	str newWidth = toStr (UTILS.math.floor(528 * ratio)) + 'px';
	GAME.UI.updateDIV('staminaBar', 'width', newWidth);
}

# Runs when the game starts
public action start() {

}

# Runs every game tick
public action update(num delta) {
    checkStamina();
	checkDoubleJump(delta);
	GAME.log(stamina.count);
}

# Add rendering logic in here
public action render(num delta) {
	updateStaminaBar();
}

# Player spawns in
public action onPlayerSpawn(str id) {
    player = GAME.PLAYERS.getSelf();
    renderStaminaBar();
}

# Player died
public action onPlayerDeath(str id, str killerID) {

}

# Player update
public action onPlayerUpdate(str id, num delta, obj inputs) {
	if(!!staminaStagnant(delta)){
		increaseStamina(delta);
	}
    checkSprint(delta);
	doubleJump(inputs, delta);
}

# User pressed a key
public action onKeyPress(str key, num code) {
    sprintActive(code);
}

# User released a key
public action onKeyUp(str key, num code) {
    sprintDeactive(code);
}

# User held a key
public action onKeyHeld(str key, num code) {
    
}

# User clicked on screen
public action onMouseClick(num button, num x, num y) {

}

# User released clicked on screen
public action onMouseUp(num button, num x, num y) {

}

# User scrolled on screen
public action onMouseScroll(num dir) {

}

# User clicked a DIV (ID)
public action onDIVClicked(str id) {

}

# Client receives network message
public action onNetworkMessage(str id, obj data) {

}
